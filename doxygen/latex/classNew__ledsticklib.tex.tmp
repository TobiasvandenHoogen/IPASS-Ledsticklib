\hypertarget{classNew__ledsticklib}{}\section{New\+\_\+ledsticklib Class Reference}
\label{classNew__ledsticklib}\index{New\+\_\+ledsticklib@{New\+\_\+ledsticklib}}


This is the class for W\+S2812 leds. The class is a subclass and is based on window from the hwlib library. In the protected specifier are variables stored like the portarray and pinarray which stores the port and bit of each pin given in the contructor. The other variables like.  




{\ttfamily \#include $<$New\+\_\+\+Ledsticklib.\+hpp$>$}



Inheritance diagram for New\+\_\+ledsticklib\+:
% FIG 0


Collaboration diagram for New\+\_\+ledsticklib\+:
% FIG 1
\subsection*{Public Member Functions}
\begin{DoxyCompactItemize}
\item 
\mbox{\Hypertarget{classNew__ledsticklib_aee26882703a2518c04a6cf9e22ca2d39}\label{classNew__ledsticklib_aee26882703a2518c04a6cf9e22ca2d39}} 
\hyperlink{classNew__ledsticklib_aee26882703a2518c04a6cf9e22ca2d39}{New\+\_\+ledsticklib} (hwlib\+::xy total\+\_\+pixels, int $\ast$portarray, int $\ast$pinarray)
\begin{DoxyCompactList}\small\item\em This is the constructor of the library. To call the object you need three values. At first an hwlib\+::xy value so that all leds will be configured. Secondly an array of the portletter from each pin, and at last an pinarray which consist of the portnumber from each pin. \end{DoxyCompactList}\item 
void \hyperlink{classNew__ledsticklib_a44435a90bf7bdc3bec6c4614da9c089b}{write\+\_\+implementation} (hwlib\+::xy pos, hwlib\+::color c) override
\begin{DoxyCompactList}\small\item\em this function changes the color of a led \end{DoxyCompactList}\item 
void \hyperlink{classNew__ledsticklib_a63b7399b72c8b72a5b541f0ac66b1f42}{write} (hwlib\+::xy pos, hwlib\+::color c)
\begin{DoxyCompactList}\small\item\em this function is the same as write\+\_\+implementation. The difference is that this function is public while the write implementation function is protected. The only reason this function exist is to match with hwlib\+::window. \end{DoxyCompactList}\item 
\mbox{\Hypertarget{classNew__ledsticklib_a25355b84916b1fff4721d76cf75b892f}\label{classNew__ledsticklib_a25355b84916b1fff4721d76cf75b892f}} 
void \hyperlink{classNew__ledsticklib_a25355b84916b1fff4721d76cf75b892f}{flush} () override
\begin{DoxyCompactList}\small\item\em function which sends the colorvalues of the buffer array to each led \end{DoxyCompactList}\item 
\mbox{\Hypertarget{classNew__ledsticklib_a9fa8ea107562835caa64fc51a265aec0}\label{classNew__ledsticklib_a9fa8ea107562835caa64fc51a265aec0}} 
void {\bfseries reset} ()
\item 
\mbox{\Hypertarget{classNew__ledsticklib_a57a5c7c912609f1bd79cfbccb62e7e87}\label{classNew__ledsticklib_a57a5c7c912609f1bd79cfbccb62e7e87}} 
void \hyperlink{classNew__ledsticklib_a57a5c7c912609f1bd79cfbccb62e7e87}{clear} () override
\begin{DoxyCompactList}\small\item\em function wich sends three bytes with the value zero to each led which cause a led to go off go off \end{DoxyCompactList}\end{DoxyCompactItemize}
\subsection*{Protected Member Functions}
\begin{DoxyCompactItemize}
\item 
auto \hyperlink{classNew__ledsticklib_aa6300ac04c675a3e4b2c21ae2ef83af7}{confport} (int port)
\begin{DoxyCompactList}\small\item\em Function which returns a port depending on the giving parameter. \end{DoxyCompactList}\item 
\mbox{\Hypertarget{classNew__ledsticklib_a9d73e4f932db02b0de3deef3c08a1573}\label{classNew__ledsticklib_a9d73e4f932db02b0de3deef3c08a1573}} 
uint32\+\_\+t {\bfseries confmask} (int pin)
\item 
int \hyperlink{classNew__ledsticklib_a8454428b9f9401eb1c7b93a006326a45}{checkbit} (uint8\+\_\+t value, int number)
\begin{DoxyCompactList}\small\item\em function which checks if a bit from a byte is 0 or 1 \end{DoxyCompactList}\item 
void \hyperlink{classNew__ledsticklib_a2c960f7c1f576f088cafe0b1c9630c86}{send\+Bit} (bool bit)
\begin{DoxyCompactList}\small\item\em function which sets a bit of a stick(depending on fush function) as output and sends a 0 or 1 bit depending on the bit parameter \end{DoxyCompactList}\item 
void \hyperlink{classNew__ledsticklib_a5c81be40c96d7fd3eaf6a4d7589b66dc}{send\+Byte} (uint8\+\_\+t value)
\begin{DoxyCompactList}\small\item\em function wich takes the parameter value and sends each bit with send\+Bit \end{DoxyCompactList}\end{DoxyCompactItemize}
\subsection*{Static Protected Member Functions}
\begin{DoxyCompactItemize}
\item 
static void \hyperlink{classNew__ledsticklib_a6f3fff3b20ff9371b01c9181842aee97}{wait\+\_\+busy} (int32\+\_\+t n) \+\_\+\+\_\+attribute\+\_\+\+\_\+((noinline))
\begin{DoxyCompactList}\small\item\em Assembly function which waits at least 3 cycles (33 nanoseconds) times the given value. this function is used to create a delay in the send\+Bit. \end{DoxyCompactList}\end{DoxyCompactItemize}
\subsection*{Protected Attributes}
\begin{DoxyCompactItemize}
\item 
\mbox{\Hypertarget{classNew__ledsticklib_a525ac7b448521e4e7924d3e1ebd98371}\label{classNew__ledsticklib_a525ac7b448521e4e7924d3e1ebd98371}} 
int $\ast$ {\bfseries portarray}
\item 
\mbox{\Hypertarget{classNew__ledsticklib_aefce6fb15b336a340955749d83c85947}\label{classNew__ledsticklib_aefce6fb15b336a340955749d83c85947}} 
int $\ast$ {\bfseries pinarray}
\item 
\mbox{\Hypertarget{classNew__ledsticklib_a03f2df60807c903648a4b433a7da623d}\label{classNew__ledsticklib_a03f2df60807c903648a4b433a7da623d}} 
int {\bfseries stick}
\item 
\mbox{\Hypertarget{classNew__ledsticklib_ad527f59fc2d976afa0b1d3e12efd5431}\label{classNew__ledsticklib_ad527f59fc2d976afa0b1d3e12efd5431}} 
hwlib\+::color {\bfseries buffer} \mbox{[}56\mbox{]}
\end{DoxyCompactItemize}


\subsection{Detailed Description}
This is the class for W\+S2812 leds. The class is a subclass and is based on window from the hwlib library. In the protected specifier are variables stored like the portarray and pinarray which stores the port and bit of each pin given in the contructor. The other variables like. 

\subsection{Member Function Documentation}
\mbox{\Hypertarget{classNew__ledsticklib_a8454428b9f9401eb1c7b93a006326a45}\label{classNew__ledsticklib_a8454428b9f9401eb1c7b93a006326a45}} 
\index{New\+\_\+ledsticklib@{New\+\_\+ledsticklib}!checkbit@{checkbit}}
\index{checkbit@{checkbit}!New\+\_\+ledsticklib@{New\+\_\+ledsticklib}}
\subsubsection{\texorpdfstring{checkbit()}{checkbit()}}
{\footnotesize\ttfamily int New\+\_\+ledsticklib\+::checkbit (\begin{DoxyParamCaption}\item[{uint8\+\_\+t}]{value,  }\item[{int}]{number }\end{DoxyParamCaption})\hspace{0.3cm}{\ttfamily [protected]}}



function which checks if a bit from a byte is 0 or 1 


\begin{DoxyParams}{Parameters}
{\em value} & the 8 bit value \\
\hline
{\em number} & the index of the bit you want to check \\
\hline
\end{DoxyParams}
\mbox{\Hypertarget{classNew__ledsticklib_aa6300ac04c675a3e4b2c21ae2ef83af7}\label{classNew__ledsticklib_aa6300ac04c675a3e4b2c21ae2ef83af7}} 
\index{New\+\_\+ledsticklib@{New\+\_\+ledsticklib}!confport@{confport}}
\index{confport@{confport}!New\+\_\+ledsticklib@{New\+\_\+ledsticklib}}
\subsubsection{\texorpdfstring{confport()}{confport()}}
{\footnotesize\ttfamily auto New\+\_\+ledsticklib\+::confport (\begin{DoxyParamCaption}\item[{int}]{port }\end{DoxyParamCaption})\hspace{0.3cm}{\ttfamily [protected]}}



Function which returns a port depending on the giving parameter. 


\begin{DoxyParams}{Parameters}
{\em port} & the given integer of the protected portarray \\
\hline
\end{DoxyParams}
\mbox{\Hypertarget{classNew__ledsticklib_a2c960f7c1f576f088cafe0b1c9630c86}\label{classNew__ledsticklib_a2c960f7c1f576f088cafe0b1c9630c86}} 
\index{New\+\_\+ledsticklib@{New\+\_\+ledsticklib}!send\+Bit@{send\+Bit}}
\index{send\+Bit@{send\+Bit}!New\+\_\+ledsticklib@{New\+\_\+ledsticklib}}
\subsubsection{\texorpdfstring{send\+Bit()}{sendBit()}}
{\footnotesize\ttfamily void New\+\_\+ledsticklib\+::send\+Bit (\begin{DoxyParamCaption}\item[{bool}]{bit }\end{DoxyParamCaption})\hspace{0.3cm}{\ttfamily [protected]}}



function which sets a bit of a stick(depending on fush function) as output and sends a 0 or 1 bit depending on the bit parameter 


\begin{DoxyParams}{Parameters}
{\em bit} & the type of bit you want to send(0 or 1) \\
\hline
\end{DoxyParams}
\mbox{\Hypertarget{classNew__ledsticklib_a5c81be40c96d7fd3eaf6a4d7589b66dc}\label{classNew__ledsticklib_a5c81be40c96d7fd3eaf6a4d7589b66dc}} 
\index{New\+\_\+ledsticklib@{New\+\_\+ledsticklib}!send\+Byte@{send\+Byte}}
\index{send\+Byte@{send\+Byte}!New\+\_\+ledsticklib@{New\+\_\+ledsticklib}}
\subsubsection{\texorpdfstring{send\+Byte()}{sendByte()}}
{\footnotesize\ttfamily void New\+\_\+ledsticklib\+::send\+Byte (\begin{DoxyParamCaption}\item[{uint8\+\_\+t}]{value }\end{DoxyParamCaption})\hspace{0.3cm}{\ttfamily [protected]}}



function wich takes the parameter value and sends each bit with send\+Bit 


\begin{DoxyParams}{Parameters}
{\em value} & the byte you want to send \\
\hline
\end{DoxyParams}
\mbox{\Hypertarget{classNew__ledsticklib_a6f3fff3b20ff9371b01c9181842aee97}\label{classNew__ledsticklib_a6f3fff3b20ff9371b01c9181842aee97}} 
\index{New\+\_\+ledsticklib@{New\+\_\+ledsticklib}!wait\+\_\+busy@{wait\+\_\+busy}}
\index{wait\+\_\+busy@{wait\+\_\+busy}!New\+\_\+ledsticklib@{New\+\_\+ledsticklib}}
\subsubsection{\texorpdfstring{wait\+\_\+busy()}{wait\_busy()}}
{\footnotesize\ttfamily void New\+\_\+ledsticklib\+::wait\+\_\+busy (\begin{DoxyParamCaption}\item[{int32\+\_\+t}]{n }\end{DoxyParamCaption})\hspace{0.3cm}{\ttfamily [static]}, {\ttfamily [protected]}}



Assembly function which waits at least 3 cycles (33 nanoseconds) times the given value. this function is used to create a delay in the send\+Bit. 


\begin{DoxyParams}{Parameters}
{\em n} & the number of cycles times three \\
\hline
\end{DoxyParams}
\mbox{\Hypertarget{classNew__ledsticklib_a63b7399b72c8b72a5b541f0ac66b1f42}\label{classNew__ledsticklib_a63b7399b72c8b72a5b541f0ac66b1f42}} 
\index{New\+\_\+ledsticklib@{New\+\_\+ledsticklib}!write@{write}}
\index{write@{write}!New\+\_\+ledsticklib@{New\+\_\+ledsticklib}}
\subsubsection{\texorpdfstring{write()}{write()}}
{\footnotesize\ttfamily void New\+\_\+ledsticklib\+::write (\begin{DoxyParamCaption}\item[{hwlib\+::xy}]{pos,  }\item[{hwlib\+::color}]{c }\end{DoxyParamCaption})}



this function is the same as write\+\_\+implementation. The difference is that this function is public while the write implementation function is protected. The only reason this function exist is to match with hwlib\+::window. 


\begin{DoxyParams}{Parameters}
{\em pos} & the x and y coordinate of the pixel you want to set a color \\
\hline
{\em c} & the R\+GB colorvalue of the pixel you want to send as output \\
\hline
\end{DoxyParams}
\mbox{\Hypertarget{classNew__ledsticklib_a44435a90bf7bdc3bec6c4614da9c089b}\label{classNew__ledsticklib_a44435a90bf7bdc3bec6c4614da9c089b}} 
\index{New\+\_\+ledsticklib@{New\+\_\+ledsticklib}!write\+\_\+implementation@{write\+\_\+implementation}}
\index{write\+\_\+implementation@{write\+\_\+implementation}!New\+\_\+ledsticklib@{New\+\_\+ledsticklib}}
\subsubsection{\texorpdfstring{write\+\_\+implementation()}{write\_implementation()}}
{\footnotesize\ttfamily void New\+\_\+ledsticklib\+::write\+\_\+implementation (\begin{DoxyParamCaption}\item[{hwlib\+::xy}]{pos,  }\item[{hwlib\+::color}]{c }\end{DoxyParamCaption})\hspace{0.3cm}{\ttfamily [override]}}



this function changes the color of a led 


\begin{DoxyParams}{Parameters}
{\em pos} & the x and y coordinate of the pixel you want to set a color \\
\hline
{\em c} & the R\+GB colorvalue of the pixel you want to send as output \\
\hline
\end{DoxyParams}


The documentation for this class was generated from the following files\+:\begin{DoxyCompactItemize}
\item 
New\+\_\+\+Ledsticklib.\+hpp\item 
New\+\_\+\+Ledsticklib.\+cpp\end{DoxyCompactItemize}
